# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Use a package of configuration called an orb.
jobs: # a collection of steps
  build_backend:
    working_directory: ~/plantmap
    environment:
      # Configure the JVM and Gradle to avoid OOM errors
      _JAVA_OPTIONS: "-Xmx3g"
      GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2"
    docker: # run the steps with Docker
      - image: circleci/openjdk:11.0.3-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run
    steps: # a collection of executable commands
      - checkout: # check out source code to working directory
          path: ~/plantmap
      - run:
          name: Skip build if pushing a team report
          command: |
            if git diff --name-only --diff-filter=AMDR @~..@ | grep -E "^reports/"; then
                circleci-agent step halt
            fi
      # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}-{{ checksum "backend/build.gradle" }}
      - run:
          name: Run tests in parallel # See: https://circleci.com/docs/2.0/parallelism-faster-jobs/
          # Use "./gradlew test" instead if tests are not run in parallel
          command: |
            cd backend/src/test/java
            # Get list of classnames of tests that should run on this node
            CLASSNAMES=$(circleci tests glob "**/*.java" \
              | cut -c 1- | sed 's@/@.@g' \
              | sed 's/.\{5\}$//' \
              | circleci tests split --split-by=timings --timings-type=classname)
            cd ../../../..
            # Format the arguments to "./gradlew test"
            GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests",$i}')
            echo "Prepared arguments for Gradle: $GRADLE_ARGS"
            ./gradlew :backend:test $GRADLE_ARGS
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}-{{ checksum "backend/build.gradle" }}
      - store_test_results:
      # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: backend/build/test-results/test
      - store_artifacts: # Upload test results for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: backend/build/test-results/test
          when: always
      - run:
          name: Assemble JAR
          command: |
            # Skip this for other nodes
            if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
              ./gradlew :backend:stage
            fi
      # As the JAR was only assembled in the first build container, build/libs will be empty in all the other build containers.
      - store_artifacts:
          path: backend/build/libs
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  build_frontend:
    working_directory: ~/plantmap
    docker:
      - image: circleci/android:api-29
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout:
          path: ~/plantmap
      - run:
          name: Skip build if pushing a team report
          command: |
            if git diff --name-only --diff-filter=AMDR @~..@ | grep -E "^reports/"; then
                circleci-agent step halt
            fi
      - run:
          name: Setup project secrets and keys
          command: bash .circleci/setup-secrets.sh # run a script to set up Heroku
      - restore_cache:
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "frontend/build.gradle" }}-{{ checksum  "frontend/app/build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew :frontend:app:androidDependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "frontend/build.gradle" }}-{{ checksum  "frontend/app/build.gradle" }}
      - run:
          name: Run Tests
          command: ./gradlew :frontend:app:lint :frontend:app:test
      - run:
          name: Assemble APK
          command: ./gradlew :frontend:app:assembleDebug
      - store_artifacts: # for display in Artifacts: https://circleci.com/docs/2.0/artifacts/ 
          path: frontend/app/build/reports
          destination: reports
      - store_test_results: # for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: frontend/app/build/test-results
      - store_artifacts:
          path: frontend/app/build/outputs/apk/debug
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
  deploy_to_heroku:
    machine:
        enabled: true
    working_directory: ~/plantmap
    environment:
      HEROKU_APP: "plantmap" # define env var $HEROKU_APP
    steps:
      - checkout
      - run:
          name: Setup Heroku API
          command: bash .circleci/setup-heroku.sh # run a script to set up Heroku
      - run:
          name: Deploy to Heroku
          command: | # Deploy only if changes have been made in backend/**/* or Procfile or .circleci/
            git diff --name-only --diff-filter=AMDR @~..@ | grep -E "^backend/|^Procfile|^.circleci/" || exit 0
            git push heroku master

# Orchestrate or schedule a set of jobs
workflows:
  version: 2

  plantmap:
    jobs:
      - build_backend:
          filters:
            branches:
              only: master
      - build_frontend:
          filters:
            branches:
              only: master
      - deploy_to_heroku:
          filters:
            branches:
              only: master
          requires:
            - build_backend
